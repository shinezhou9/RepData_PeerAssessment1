params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NeglogLik(normals)
nLL
optim(c(mu = 0, sigma = 1), nLL)$par
?function
?function
?function()
?optim
?optimize
?optim
v <- rnorm(100, 1, 2)
length(v)
optim(c(mu = 2, sigma = 3), nLL)$par
optim(c(mu = 10, sigma = 10), nLL)$par
?lm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
boxplot
?boxplot
?abline
?lwd
?barplot
?table
data.frame(x = rep(c("a", "b", "c"), each = 3, y = rnorm(10)))
data.frame(x = rep(c("a", "b", "c"), each = 3), y = rnorm(10))
data.frame(x = rep(c("a", "b", "c"), each = 3), y = rnorm(9))
frame <- data.frame(x = rep(c("a", "b", "c"), each = 3), y = rnorm(9))
h <- frame$y
h
class(h)
table(y)
table(h)
?boxplot
?par
?hist
?mflow
?par
?boxplot
?with
?plot
library(lattice)
?xyplot
?plot
?transform
library(datasets)
head(airquality)
airquality <- transform(airquality, Month = factor(Month))
head(airquality)
class(airquality$Month)
rm(airquality)
library(datasets)
head(airquality)
class(airquality$Month)
?boxplot
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb")
?line
?abline
>coef
?coef
?title
?plot
?legend
?lm
?oma
?par
mtext()
?mtext
example(points)
?points
dat <- read.table(pipe('grep "^[1-2]/2/2007" "household_power_consumption.txt"'), header=F, sep=';', na.strings = "?")
colnames(dat) <-names(read.table('household_power_consumption.txt', header=TRUE,sep=";",nrows=1))
dat$Date <- as.Date(dat$Date, format = "%d/%m/%Y")
dat$DateTime <- paste(dat$Date, dat$Time)
dat$DateTime <- as.POSIXlt(dat$DateTime)
topY <- max(dat$Sub_metering_1, dat$Sub_metering_2, dat$Sub_metering_3)
lowY <- min(dat$Sub_metering_1, dat$Sub_metering_2, dat$Sub_metering_3)
plot(dat$DateTime, dat$Sub_metering_1, type = "l", col = "black", ylim = c(lowY, topY),xlab = " ", ylab = "Energy sub metering")
lines(dat$DateTime, dat$Sub_metering_2, col = "red")
lines(dat$DateTime, dat$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),  lty = "solid", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file = "plot3.png", width=480, height=480, units = "px")
dev.off
?sum
?reformula
?reformulate
?glm
>predict
?predict
?table
install.packages("ProjectTemplate")
library(ProjectTemplate)
?ProjectTemplate
First Line Second Line
First Line Second Line
### Header 3
This is a blockquote
Theis is the second paragraph in the blockquote
##This is an H2 in a blockquote
### Header 3
>This is a blockquote
>Theis is the second paragraph in the blockquote
>##This is an H2 in a blockquote
* Cand
* Gum
* Booze
### Header 3
* Cand
* Gum
* Booze
### Header 3
## Heading 2
setwd("~/Desktop/Reproducible Research/RepData_PeerAssessment1")
?seq_along
?seq_len
data <- read.csv("activity.csv", header = TRUE, sep = ",")
data$date_revised <- as.Date(data$date)
data$interval_revised <- sprintf("%04d", data$interval)
data$interval_time <- strptime(data$interval_revised, format = "%H%M")
s_date <- split(data, data$date_revised)
total_steps <- sapply(s_date, function(x) sum(x$steps, na.rm = TRUE))
plot <- hist(total_steps, main = "Total steps per day", xlab ="total number of steps taken each day")
mean_steps <- mean(total_steps)
median_steps <- median(total_steps)
mean_steps
median_steps
s_pattern <- split(data, data$interval_revised)
average_steps <- sapply(s_pattern, function(x) mean(x$steps, na.rm = TRUE))
plot(data$interval_time[1:288], average_steps, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps")
max_index <- which(average_steps == max(average_steps))
max_interval <- data$interval_revised[max_index]
max_interval
bad <- is.na(data$steps)
num_NA <- length(data$steps[bad])
num_NA
data$average_steps <- average_steps
head(data)
seq_len(nrow(data))
nrow(data)
class(nrow(data))
class(seq_len(nrow(data)))
for (i in 1:nrow(data)) {
if (is.na(data[i, "steps"])) {
data[i, "steps"] <- data[i, "average_steps"]
}
}
head(data)
for (i in seq(nrow(data))) {
if (is.na(data[i, "steps"])) {
data[i, "steps"] <- data[i, "average_steps"]
}
}
head(data)
?data.frame
data_revised <- data.frame(data$steps, data$date, data$inteval)
?scan
class(data$steps)
class(data$date)
length(data$steps)
length(data$date)
length(data$interval)
?data.frame
data_revised <- data.frame(data$steps, data$date, data$interval)
head(data_revised)
head(data)
s_date_revised <- split(data, data$date_revised)
total_steps_revised <- sapply(s_date_revised, function(x) sum(x$steps, na.rm = TRUE))
plot <- hist(total_steps_revised, main = "Total steps per day_revised", xlab ="total number of steps taken each day_revised")
?weekdays
head(data)
class(data$date_revised)
for (i in seq(nrow(data))) {
if (is.na(data[i, "steps"])) {
data$steps_revised[i, "steps"] <- data[i, "average_steps"]
}
}
head(data)
data <- read.csv("activity.csv", header = TRUE, sep = ",")
data$date_revised <- as.Date(data$date)
data$interval_revised <- sprintf("%04d", data$interval)
data$interval_time <- strptime(data$interval_revised, format = "%H%M")
s_date <- split(data, data$date_revised)
total_steps <- sapply(s_date, function(x) sum(x$steps, na.rm = TRUE))
plot <- hist(total_steps, main = "Total steps per day", xlab ="total number of steps taken each day")
mean_steps <- mean(total_steps)
median_steps <- median(total_steps)
mean_steps
median_steps
s_pattern <- split(data, data$interval_revised)
average_steps <- sapply(s_pattern, function(x) mean(x$steps, na.rm = TRUE))
plot(data$interval_time[1:288], average_steps, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps")
max_index <- which(average_steps == max(average_steps))
max_interval <- data$interval_revised[max_index]
max_interval
bad <- is.na(data$steps)
num_NA <- length(data$steps[bad])
num_NA
data$average_steps <- average_steps
for (i in seq(nrow(data))) {
if (is.na(data[i, "steps"])) {
data$steps_revised[i, "steps"] <- data[i, "average_steps"]
}
}
data$average_steps <- average_steps
for (i in seq(nrow(data))) {
if (is.na(data[i, "steps"])) {
data$steps_revised[i, "steps"] <- data[i, "average_steps"]
}
}
data$average_steps <- average_steps
for (i in seq(nrow(data))) {
if (is.na(data[i, "steps"])) {
data$steps_revised[i] <- data[i, "average_steps"]
}
}
head(data)
data_revised <- data.frame(steps = data$steps_revised, date = data$date, interval = data$interval)
head(data_revised)
s_date_revised <- split(data, data$date_revised)
total_steps_revised <- sapply(s_date_revised, function(x) sum(x$steps_revised, na.rm = TRUE))
plot <- hist(total_steps_revised, main = "Total steps per day_revised", xlab ="total number of steps taken each day_revised")
head(s)
head(s_date_revised)
s_data_revised[1]
s_date_revised[1]
data$average_steps <- average_steps
for (i in seq(nrow(data))) {
if (is.na(data[i, "steps"])) {
data$steps_revised[i] <- data[i, "average_steps"]
}
else {
data$steps_revised[i] <- data[i, steps]
}
}
data$average_steps <- average_steps
for (i in seq(nrow(data))) {
if (is.na(data[i, "steps"])) {
data$steps_revised[i] <- data[i, "average_steps"]
}
else {
data$steps_revised[i] <- data[i, "steps"]
}
}
data_revised <- data.frame(steps = data$steps_revised, date = data$date, interval = data$interval)
head(data_revised)
s_date_revised <- split(data, data$date_revised)
total_steps_revised <- sapply(s_date_revised, function(x) sum(x$steps_revised, na.rm = TRUE))
plot <- hist(total_steps_revised, main = "Total steps per day_revised", xlab ="total number of steps taken each day_revised")
mean_steps <- mean(total_steps_revised)
median_steps <- median(total_steps_revised)
mean_steps
median_steps
head(data)
data$day_type <- weekdays(data$date_revised)
head(data)
levels(data$day_type)
class(data$day_type)
?weekdays
"Saturday" == weekend
"Saturday" == "weekend""
"Saturday" == "weekend"
"Saturday" == "weekend"
data$day_type <- "weekdays"
head(data)
data$day_type[isWeekend(data$date_revised)] <- "weekend"
data$day_type[is.Weekend(data$date_revised)] <- "weekend"
data$day_type[is.weekend(data$date_revised)] <- "weekend"
?isWeekend
?is.weekend
?isWeekday
?isweekday
?is.Weekday
?is.timeDate
??isWeekday
install.packages("timeDate")
?isWeekdays
?isWeekday
help(timeDate)
?isWeekend
??isWeekend
isWeekday
?isWeekday
library(timeDate)
?isWeekend
library(timeDate)
data$day_type <- "weekdays"
data$day_type[is.weekend(data$date_revised)] <- "weekend"
library(timeDate)
data$day_type <- "weekdays"
data$day_type[isWeekend(data$date_revised)] <- "weekend"
str(data$day_type)
levels(data$day_type)
data$day_type[1:500]
data$day_type[1000:2000]
data[2440:2540,]
data[1440:1540,]
source('~/.active-rstudio-document', echo=TRUE)
data[1440:1450]
data[1440:1450,]
head(data)
nrow(data)
data[6:50,]
data[500:510,]
mean(data$steps_revised)
head(data)
as.factor(data$day_type)
class(data$day_type)
levels(data$day_type)
summary(data$day_type)
str(data$day_type)
?as.factor
data$day_type <- as.factor(data$day_type)
class(data$day_type)
levels(data$day_type)
s_pattern <- split(data, data$interval_revised)
average_steps <- sapply(s_pattern, function(x) mean(x$steps, na.rm = TRUE))
plot(data$interval_time[1:288], average_steps, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps")
s_pattern <- split(data, data$interval_revised)
average_steps_revised <- sapply(s_pattern, function(x) mean(x$steps_revised, na.rm = TRUE))
plot(data$interval_time[1:288], average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps")
head(data)
head(average_steps_revised)
libray(lattice)
library(lattice)
?xyplot
xyplot(averayge_steps_revised~interval_time[1:288] | day_type, data = data, layout = c(2,1))
xyplot(average_steps_revised~interval_time[1:288] | day_type, data = data, layout = c(2,1))
s_pattern <- split(data, data$interval_revised)
data$average_steps_revised <- sapply(s_pattern, function(x) mean(x$steps_revised, na.rm = TRUE))
library(lattice)
head(data)
xyplot(average_steps_revised~interval_time | day_type, data = data, layout = c(2,1))
xyplot(average_steps_revised~interval_revised | day_type, data = data, layout = c(2,1))
xyplot(average_steps_revised~interval_revised | day_type, data = data, layout = c(1,2))
?xyplot
data$average_steps_revised
head(data$average_steps)
head(data$average_steps_revised)
s_pattern <- split(data, data$interval_revised)
data$average_steps_revised <- sapply(s_pattern, function(x) mean(x$steps_revised, na.rm = TRUE))
par(mfrom = c(1,2))
with(subset(data, day_type == "weekend"), plot(interval_time, average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps")
s_pattern <- split(data, data$interval_revised)
data$average_steps_revised <- sapply(s_pattern, function(x) mean(x$steps_revised, na.rm = TRUE))
par(mfrom = c(1,2))
with(subset(data, day_type == "weekend"), plot(interval_time, average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps"))
head(data)
levels(data$day_type)
with(subset(data, day_type == "weekend"), plot(interval_time, average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps"))
with(subset(data, day_type == "weekdays"), plot(interval_time, average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps"))
par(mfrom = c(1,2))
with(subset(data, day_type == "weekend"), plot(interval_time, average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps"))
with(subset(data, day_type == "weekdays"), plot(interval_time, average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps"))
with(subset(data, day_type == "weekdays"), plot(interval_time, average_steps_revised, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps"))
par(mfrom = c(1,2))
with(subset(data, day_type == "weekend"), plot(interval_time, average_steps_revised, type = "l"))
with(subset(data, day_type == "weekdays"), plot(interval_time, average_steps_revised, type = "l"))
par(mfrom = c(2,1))
with(subset(data, day_type == "weekend"), plot(interval_time, average_steps_revised, type = "l"))
with(subset(data, day_type == "weekdays"), plot(interval_time, average_steps_revised, type = "l"))
with(subset(data, day_type == "weekdays"), plot(interval_time, average_steps_revised, type = "l"))
s_pattern <- split(data, data$interval_revised)
data$average_steps_revised <- sapply(s_pattern, function(x) mean(x$steps_revised))
head(data$average_steps_revised)
data_weekend <- subset(data, day_type == "weekend")
data_weekdays <- subset(data, day_type == "weekdays")
s_dayType <- split(data, data$day_type)
s_pattern <- lapply(s_dayType, function(x) split(s_dayType, s_dataType$interval_revised)
s_dayType <- split(data, data$day_type)
s_pattern <- lapply(s_dayType, function(x) split(s_dayType, s_dataType$interval_revised))
s_dayType <- split(data, data$day_type)
s_pattern <- lapply(s_dayType, function(x) split(s_dayType, s_dayType$interval_revised))
s_dayType <- split(data, data$day_type)
s_pattern <- lapply(s_dayType, function(x) split(x, x$interval_revised))
head(s_pattern)
average_steps_revised <- sapply(s_pattern, function(x) mean(x$steps_revised))
class(s_pattern$steps_revised)
s_pattern$steps_revised
names(s_pattern)
names(s_dayType)
data_weekend <- s_pattern["weekend"]
head(data_weekend)
date_weekdays <- s_pattern["weekdays"]
data_weekdays <- s_pattern["weekdays"]
head(data_weekdays)
average_steps_revised <- sapply(s_pattern, function(x) mean(x$steps_revised))
source('~/.active-rstudio-document', echo=TRUE)
data_weekdays <- s_pattern["weekdays"]
data_weekend <- s_pattern["weekend"]
names(data_weekdays)
s_dayType <- split(data, data$day_type)
s_pattern <- sapply(s_dayType, function(x) split(x, x$interval_revised))
data_weekdays <- s_pattern["weekdays"]
data_weekend <- s_pattern["weekend"]
names(data_weekdays)
length(data_weekdays)
class(data_weekdays)
class(s_pattern)
str(data_weekdays)
head(data_weekdays)
names(s_pattern)
head(s_pattern)
head(data)
class(s_dayType)
head(s_day_Type)
head(s_dayType)
s_pattern <- lapply(s_dayType, function(x) split(x, x$interval_revised))
head(s_pattern)
names(s_pattern)
data_weekdays <- s_pattern["weekdays"]
data_weekend <- s_pattern["weekend"]
str(data_weekdays)
summary(data_weekdays)
data_weekdays[1]
data_weekdays[[1]][[1]]
data_weekdays <- s_pattern[["weekdays"]][[1]]
length(data_weekdays)
data_weekdays[1]
data_weekdays
data_weekdays <- s_pattern[["weekdays"]]
class(data_weekdays)
data_weekdays[1]
data_weekdays <- s_pattern["weekdays"]
class(data_weekdays)
data_weekdays[1]
data_weekdays <- s_pattern[["weekdays"]]
data_weekend <- s_pattern[["weekend"]]
data_weekdays
data_weekdays <- s_pattern[["weekdays"]]
data_weekend <- s_pattern[["weekend"]]
data_weekdays
data_weekdays <- s_pattern[["weekdays"]][[1]]
data_weekdays
data_weekdays <- s_pattern[["weekdays"]][[1]]
data_weekend <- s_pattern[["weekend"]][[1]]
class(data_weekdays)
data_weekdays
data_weekdays <- s_pattern[["weekdays"]]
data_weekend <- s_pattern[["weekend"]]
class(data_weekdays)
length(data_weekdays)
data_weekdays <- s_pattern["weekdays"]
class(data_weekdays)
length(data_weekdays)
data_weekdays <- s_pattern[["weekdays"]]
data_weekend <- s_pattern[["weekend"]]
average_steps_weekdays <- sapply(data_weekdays,function(x) mean(x$steps_revised) )
average_steps_weekdays <- sapply(data_weekend,function(x) mean(x$steps_revised) )
par(mfrom = c(2,1))
plot(interval_time[1:288], average_steps_weekdays, type = "l"))
plot(interval_time[1:288], average_steps_weekend, type = "l"))
par(mfrow = c(2,1))
plot(interval_time[1:288], average_steps_weekdays, type = "l"))
plot(interval_time[1:288], average_steps_weekend, type = "l"))
par(mfrow = c(2,1))
plot(interval_time[1:288], average_steps_weekdays, type = "l")
plot(interval_time[1:288], average_steps_weekend, type = "l")
par(mfrow = c(2,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l")
plot(data$interval_time[1:288], average_steps_weekend, type = "l")
average_steps_weekdays <- sapply(data_weekdays,function(x) mean(x$steps_revised) )
average_steps_weekend <- sapply(data_weekend,function(x) mean(x$steps_revised) )
par(mfrow = c(1,2))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l")
plot(data$interval_time[1:288], average_steps_weekend, type = "l")
par(mfrow = c(2,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l")
plot(data$interval_time[1:288], average_steps_weekend, type = "l")
par(mfrow = c(2,1),mar = c(2,2,1,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l")
plot(data$interval_time[1:288], average_steps_weekend, type = "l")
par(mfrow = c(2,1),mar = c(2,2,1,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l", main = "weekdays", xlab = "interval", ylab = "Number of steps")
plot(data$interval_time[1:288], average_steps_weekend, type = "l", xlab = "interval", ylab = "Number of steps")
par(mfrow = c(2,1),mar = c(2,2,1,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l", main = "weekdays", xlab = "interval", ylab = "Number of steps")
plot(data$interval_time[1:288], average_steps_weekend, type = "l", main = "weekend", xlab = "interval", ylab = "Number of steps")
par(mfrow = c(2,1),mar = c(3,3,2,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l", main = "weekdays", xlab = "interval", ylab = "Number of steps")
plot(data$interval_time[1:288], average_steps_weekend, type = "l", main = "weekend", xlab = "interval", ylab = "Number of steps")
par(mfrow = c(2,1),mar = c(2,3,2,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l", main = "weekdays", xlab = "interval", ylab = "Number of steps")
plot(data$interval_time[1:288], average_steps_weekend, type = "l", main = "weekend", xlab = "interval", ylab = "Number of steps")
plot(data$interval_time[1:288], average_steps_weekdays, type = "l", col = "blue", main = "weekdays", xlab = "interval", ylab = "Number of steps")
plot(data$interval_time[1:288], average_steps_weekend, type = "l", col = "blue", main = "weekend", xlab = "interval", ylab = "Number of steps")
par(mfrow = c(2,1),mar = c(4,3,2,1))
plot(data$interval_time[1:288], average_steps_weekdays, type = "l", col = "blue", main = "weekdays", xlab = "interval", ylab = "Number of steps")
plot(data$interval_time[1:288], average_steps_weekend, type = "l", col = "blue", main = "weekend", xlab = "interval", ylab = "Number of steps")
plot <- hist(total_steps, main = "Total steps per day", xlab ="total number of steps taken each day")
```{r hist_totalstep, fig.height= 6}
plot <- hist(total_steps, main = "Total steps per day", xlab ="total number of steps taken each day")
plot <- hist(total_steps, main = "Total steps per day", xlab ="total number of steps taken each day")
?opts_chunk
?opts_chunk
?plot
?knit2html
load(knitr)
library(knitr)
?knit2html

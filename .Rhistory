fit$coef
fit
summary(sm$coef)
var_table$Pr[2]
var_table
names(var_table)
sum$coef
sm$coef
class(sum$coef)
class(sm$coef)
sm$coef[2,2]
sm$coef[2,4]
str(mtcars)
str(mtcars1)
fitbest <- lm(mpg ~ am + wt + hp, data = mtcars1)
plot(fit)
fitbest <- lm(mpg ~ am + wt + hp, data = mtcars1)
plot(fitbest)
ggplot(fitbest)
library(ggplot2)
ggplot(fitbest)
g <- ggplot(bestfit)
g + geom()
g + geom_point()
qplot(fitbest)
par(mar)
par("mar")
plot(fitbest)
smbest <- summary(fitbest)
intercept <- smbest$coef[1]
slope <- smbest$coef[2]
sigma <- smbest$1sigma
rsquared <- smbest$r.squared
p_value <- smbest$1coef[2,4]
smbest <- summary(fitbest)
intercept <- smbest$coef[1]
slope <- smbest$coef[2]
sigma <- smbest$sigma
rsquared <- smbest$r.squared
p_value <- smbest$coef[2,4]
intercept
slope
sigma
fit <- lm(mpg~am, data = mtcars1)
sm <- summary(fit)
intercept <- sm$coef[1]
slope <- sm$coef[2]
sigma <- sm$sigma
rsquared <- sm$r.squared
p_value <- sm$coef[2,4]
smbest <- summary(fitbest)
intercept1 <- smbest$coef[1]
slope1 <- smbest$coef[2]
sigma1 <- smbest$sigma
rsquared1 <- smbest$r.squared
p_value1 <- smbest$coef[2,4]
c(sigma, sigma1)
rsquared
rsquared1
p_value
p_value1
sm
smbest
?mtcars
print(wd)
pwd()
setwd()
setwd("~/Desktop/regression_model")
?mtext
?title
library(ggplot2)
?title
?labs
?side
data(mtcars)
mtcars1 <- transform(mtcars, am = as.factor(am), vs = as.factor(vs))
levels(mtcars1$am) <- c("Automatic", "Manual")
data(mtcars)
mtcars1 <- transform(mtcars, am = as.factor(am), vs = as.factor(vs))
levels(mtcars1$am) <- c("Automatic", "Manual")
library(xtable)
coef <- sort(cor(mtcars)[1,])
class(coef)
library(datasets); data(mtcars); require(stats); require(graphics)
pairs(mtcars, panel = panel.smooth, main = "mtcars data")
cars <- transform(mtcars, am = as.factor(am))
fit <- lm(mpg ~., cars)
fit1 <- lm(mpg ~ am, cars)
makelmcars <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am, cars))[2],
coef(lm(mpg ~ am + cyl, cars))[2],
coef(lm(mpg ~ am + cyl + disp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, cars))[2])
print(cf)
}
cf
cf()
makelmcars()
?rep
rnorm(500, 175, 195)
sample <- rnorm(500, 175, 195)
hist(sample, breaks = 20)
hist(sample, breaks = 100)
9.4/sqrt(507)
z <- (30.69-32)/4.31
pnorm(z)
z <- (30.69-32)/(4.31/sqrt(n))
z <- (30.69-32)/(4.31/sqrt(36))
pnorm(z)
30.69 + c(-1,1)*z*(4.31/sqrt(36))
z <- qnorm(.98, 1500, 300)
z
z*300/40
z <- qnorm(.99)
z
z*300/40
n <- z*300/40
n^2
pnorm(1.96)
z <- qnorm(.1)
z
n = 35
z <- 4/(17/sqrt(n))
z
p(z)
pnorm(z)*2
z
pnorm(z, lower.tail = TRUE)*2
pnorm(z, lower.tail = FALSE)*2
qnorm(.9)
qnorm(.95)
z <- qnorm(.95)
n <- 36
mean = 30.69
sd = 4.31
ci <- mean + c(-1,1)*z*sd/sqrt(n)
ci
1.96*300/25
23.52^2
?qqnorm
?qqline
s <- rnorm(1000)
qqnorm(s)
qqline(s)
qqnorm(s)
?mosaicplot
s <- data.froma(x = sample(c(1,2), 50, replace = TRUE), y = sample(c(a, b), 50 replace = TRUE) )
s <- data.froma(x = sample(c(1,2), 50, replace = TRUE), y = sample(c(a, b), 50, replace = TRUE))
s <- data.frama(x = sample(c(1,2), 50, replace = TRUE), y = sample(c(a, b), 50, replace = TRUE))
s <- data.frame(x = sample(c(1,2), 50, replace = TRUE), y = sample(c(a, b), 50, replace = TRUE))
s <- data.frame(x = sample(c(1,2), 50, replace = TRUE), y = sample(c("a", "b"), 50, replace = TRUE))
s
barplot(table(s$x, s$y))
mosaicplot(table(s$x, s$y))
?by
source("http://bit.ly/dasi_inference")
i <- source("http://bit.ly/dasi_inference")
i
?inference
x <- rnorm(100); y <- x + rnorm(50)
lm <- lm(y~x)
plot(lm$residuals ~ x)
plot(m$residuals ~ lm$fitted)
plot(lm$residuals ~ lm$fitted)
head(lm$fitted)
head(y)
mean(lm$fitted)
mean(y)
mean(x)
x <- rnorm(100); y <- x + rnorm(50, mean = 10, sd = 5)
lm <- lm(y~x)
plot(lm$residuals ~ x)
plot(lm$residuals~ lm$fitted)
plot(lm$residuals)
hist(lm$residuals)
qqnorm(lm$residuals)
qqline(lm$residuals)
?droplevels
load(url("http://bit.ly/dasi_gss_data"))
gss <- dasi_gas_data
gss <- dasi_gss_data
names(gss)
head(gss$EDUC)
head(gss$educ)
gss1 <- gss[educ == "IAP"]
edu <- gss$educ[gss$educ == "IAP"]
edu
edu <- gss$educ[gss$educ == "DK"]
edu
edu <- gss$educ[gss$educ == "NA"]
edu
gss$edu[!is.na(gss$edu)]
edu1 <- gss$edu[!is.na(gss$edu)]
table(edu1)
histgram(edu1, break = 20)
histgram(edu1, breaks = 20)
histogram(edu1, breaks = 20)
hist(edu1, breaks = 20)
income <- gss$income06
table(income)
hist(income)
class(income)
income <- as.numeric(income)
hist(income)
hist(income, breaks = 25)
hist(income, breaks = 25, xlim = range(income))
hist(income, breaks = 25, xlim = c(1:25)
hist(income, breaks = 25, xlim = c(1:25))
?hist
hist(income, breaks = 25, xlim = range(1:25))
str(gss$natheal)
str(gss$income66)
str(gss$income06)
str(gss$helpsick)
str(gss$coninc)
gss$coninc[is.na(gss$coninc)]
table(gss$coninc[is.na(gss$coninc)])
table(is.na(gss$coninc))
summary(gss$coninc)
gss1 <- as.dataframe(income <- gss$income06, natheal <- gss$natheal)
gss1 <- dataframe(income <- gss$income06, natheal <- gss$natheal)
gss1 <- data.frame(income <- gss$income06, natheal <- gss$natheal)
head(gss)
head(gss1)
table(is.na(gss$income06))
table(is.na(gss$natheal))
by(gss$income, gss$natheal, summary)
gss1$income <- as. numeric(gss1$income)
gss1$income <- as.numeric(gss1$income)
by(gss1$income, gss1$natheal, summary)
by(gss1$income, gss1$natheal, summary, na.rm = TRUE)
boxplot(gss$income, gss$natheal)
boxplot(gss1$income, gss1$natheal)
boxplot(gss1$natheal, gss1$income)
class(gss1$nathea)
boxplot(gss1$income, gss1$nathea)
boxplot(gss1$income, gss1$natheal)
class(gss1$income)
class(gss1$natheal)
gss2 <- subset(gss), !is.na(c(income, natheal))
gss2 <- subset(gss), !is.na(income))
gss2 <- subset(gss, !is.na(c(income, natheal)))
str(gss2)
head(gss2)
gss2 <- subset(gss, !is.na(income06))
hea(gss2)
head(gss2)
gss2 <- subset(gss, !is.na(natheal))
head(gss2)
str(gss2)
gss2 <- subset(gss2, income = "income06", natheal = "natheal" )
head(gss2)
gss2 <- data.frame(income = gss2$income06, natheal = gss$natheal)
gss1 <- subset(gss, !is.na(income06))
nrows(gss1)
nrow(gss1)
table(is.na(gss$income06))
table(is.na(gss$coninc))
table(is.na(gss$income06))
gss1 <- subset(gss, income = coninc, na.rm = TRUE)
gss1 <- subset(gss, !is.na(coninc))
nrow(gss1)
gss1 <- subset(gss1, !is.na(natheal))
nrow(gss1)
head(gss1)
head(gss1$coninc)
head(gss$coninc)
summary(gss1$coninc)
str(gss1$coninc)
table(is.na(gss$natheal))
head(gss1)
gss2 <- data.frame(income = gss$coninc, natheal = gss1$natheal)
gss2 <- data.frame(income = gss1$coninc, natheal = gss1$natheal)
head(gss2)
tail(gss2)
by(gss2$income, gss2$natheal)
by(gss2$income, gss2$natheal, summary)
boxplot(gss2$income, gss2$natheal)
str(gss2)
?boxplot
boxplot(income~natheal, gss2)
boxplot(coninc ~ nateduc, gss)
boxplot(educe ~ nateduc, gss)
boxplot(educ ~ nateduc, gss)
boxplot(educ ~ born, gss)
boxplot(coninc ~ born, gss)
boxplot(income06 ~ born, gss)
boxplot(educ ~ born, gss)
boxplot(educ ~ uscitizen, gss)
boxplot(educ ~ uscitzn, gss)
boxplot(coninc ~ uscitzn, gss)
boxplot(educ ~ born, gss)
boxplot(income ~ born, gss)
boxplot(coninc ~ born, gss)
boxplot(educ ~ nateduc, gss)
boxplot(coninc ~ nateduc, gss)
boxplot(coninc ~ healpsick, gss)
boxplot(coninc ~ helpsick, gss)
boxplot(coninc ~ unemp, gss)
opnion(conin ~ finalter)
opnion(conin ~ finalter, gss)
boxplot(conin ~ finalter, gss)
boxplot(coninc ~ finalter, gss)
boxplot(coninc ~ unemp, gss)
boxplot(educ ~ unemp, gss)
boxplot(coninc ~ helpoor, gss)
boxplot(coninc ~ helppoor, gss)
boxplot(coninc ~ helpnot, gss)
boxplot(coninc ~ news, gss)
class(gss$news)
lm <- lm(gss$coninc ~ gss$news)
summary(lm)$coef
library(ggplot2)
n <- ggplot(gss, aes(news, coninc))
library(ggplot2)
news <- ggplot(gss, aes(news, coninc))
news + geom_boxplot(aes(fill = news))
table(is.na(gss$news))
table(is.na(gss$coninc))
gss1 <- data.frame(news=gss$news, income = gss$coninc)
gss1 <- gss1[!is.na(gss1$income)]
gss1 <- gss1[!is.na(gss1$news)]
library(ggplot2)
news <- ggplot(gss, aes(news, coninc))
news + geom_boxplot(aes(fill = news))
gss1 <- data.frame(news=gss$news, income = gss$coninc)
gss1 <- subset(gss1, !is.na(income))
gss1 <- subset(gss1, !is.na(news))
library(ggplot2)
news <- ggplot(gss, aes(news, coninc))
news + geom_boxplot(aes(fill = news))
nrow(gss1)
table(is.na(gss1$income)
table(is.na(gss1$income))
gss1 <- data.frame(news=gss$news, income = gss$coninc)
gss1 <- subset(gss1, !is.na(income))
gss1 <- subset(gss1, !is.na(news))
library(ggplot2)
news <- ggplot(gss1, aes(news, coninc))
news + geom_boxplot(aes(fill = news))
gss1 <- data.frame(news=gss$news, income = gss$coninc)
gss1 <- subset(gss1, !is.na(income))
gss1 <- subset(gss1, !is.na(news))
library(ggplot2)
news <- ggplot(gss1, aes(news, income))
news + geom_boxplot(aes(fill = news))
level(ggs1$news)
levels(ggs1$news)
levels(gss1$news)
gss1 <- data.frame(news=gss$news, income = gss$coninc)
gss1 <- subset(gss1, !is.na(income))
gss1 <- subset(gss1, !is.na(news))
library(ggplot2)
news <- ggplot(gss1, aes(news, income))
news + geom_boxplot(aes(fill = news))+labs(x = "Newspaper Reading Frequency", y = "Total Family Income($)")
qplot(x = news, y = income, data = ggs1, geom = ("boxplot"), fill = news)
qplot(x = news, y = income, data = gss1, geom = ("boxplot"), fill = news)
qplot(x = news, y = income, data = gss1, geom = ("boxplot"), fill = news, xlab= "Newspaper Reading Frequency", ylab = "Total Family Income($)")
head(ggs1)
head(gss1)
View.table(gss1)
view.table(gss1)
View(gss1)
View(gss1, 100)
?view
?View
View(gss)
nrow(gss1)
setwd("~/Desktop/reproducible_research/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("timeDate")
source('~/.active-rstudio-document', echo=TRUE)
head(data$interval_time)
length(data$interval_time)
length(average_steps_weekdays)
weekpattern <- data.frame(time = data$interval_time[1:288], ave_weekdays = average_steps_weekdays, ave_weekends = average_steps_weekend)
head(weekpattern)
nrow(weekpattern)
?rbind
weekdays <- data.frame(time = data$interval_time[1:288], ave_weekdays = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_weekend = average_steps_weekend, day = "weekend")
rbind(weekdays, weekend)
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weeken")
rbind(weekdays, weekend)
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
head(pattern)
nrow(pattern)
pattern <- ggplot(weekpattern, aes(time, ave_weekdays,group = day))
pattern + geom_line(aes(colour = day))
pattern <- ggplot(pattern, aes(time, ave_weekdays,group = day))
pattern + geom_line(aes(colour = day))
pattern <- ggplot(pattern, aes(time, ave_steps,group = day))
pattern + geom_line(aes(colour = day))
pattern$day <- as.factor(pattern$day)
str(pattern)
head(pattern)
head(pattern)
class(pattern)
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
pattern$day <- as.factor(pattern$day)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day))
class(total_steps)
library(ggplo2)
qplot(total_steps, geom = "histogram")
library(ggplot2)
qplot(total_steps, geom = "histogram")
qplot(total_steps, geom = "histogram", count = 10)
qplot(total_steps, geom = "histogram", binwidth = 10)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 1)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 100)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 20)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 30)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 1000)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 1000, fill = ..count..)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 2000, fill = ..count..)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 1500, fill = ..count..)
library(ggplot2)
qplot(total_steps, geom = "histogram", binwidth = 1000, fill = ..count..)
qplot(total_steps, geom = "histogram", binwidth = 1000, fill = ..count.., alpha = .5)
qplot(total_steps, geom = "histogram", binwidth = 1000, fill = ..count.., alpha = .8)
qplot(total_steps, geom = "histogram", binwidth = 5000, fill = ..count..)
day_pattern <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps)
p_day <- ggplot(day_pattern, aes(x = time, y = ave_steps))
p_day+geom_line(colour = "blue")
p_day+geom_line(colour = "blue")+scale_colour_gradiant(high = "red")
p_day+geom_line(colour = "blue")+scale_colour_gradient(high = "red")
p_day+geom_line(colour = "blue", size = 1)
p_day+geom_line(colour = "light blue", size = 1)
p_day+geom_line(colour = "grey blue", size = 1)
p_day+geom_line(colour = "blue", size = .5)
p_day+geom_line(colour = "blue", size = .5)+labs(x = "interval", y = "Number of steps")
p_day+geom_line(colour = "steelblue", size = .5)+labs(x = "interval", y = "Number of steps")
p_day+geom_line(colour = "steelblue1", size = .5)+labs(x = "interval", y = "Number of steps")
p_day+geom_line(colour = "steelblue2", size = .5)+labs(x = "interval", y = "Number of steps")
p_day+geom_line(colour = "steelblue3", size = .5)+labs(x = "interval", y = "Number of steps")
p_day+geom_line(colour = "steelblue3", size = .7)+labs(x = "interval", y = "Number of steps")
qplot(total_steps, geom = "histogram", binwidth = 1000, fill = ..count..)
qplot(total_steps, geom = "histogram", binwidth = 1000, fill = ..count.., xlab = "Total steps per day", ylab = "Frequency")
p_day+geom_line(colour = "tomato", size = .7)+labs(x = "interval", y = "Number of steps")
p_day+geom_line(colour = "tomato", size = .7)+labs(x = "interval", y = "Number of steps", title = "Average Daily Activity Pattern")
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
qplot(total_step_revised, geom = "histogram", binwidth = 1000, fill = ..count.., xlab = "Total steps per day", ylab = "Frequency", main = "Total steps per day(simulated data)")
s_date_revised <- split(data, data$date_revised)
total_steps_revised <- sapply(s_date_revised, function(x) sum(x$steps_revised, na.rm = TRUE))
qplot(total_step_revised, geom = "histogram", binwidth = 1000, fill = ..count.., xlab = "Total steps per day", ylab = "Frequency", main = "Total steps per day(simulated data)")
qplot(total_steps_revised, geom = "histogram", binwidth = 1000, fill = ..count.., xlab = "Total steps per day", ylab = "Frequency", main = "Total steps per day(simulated data)")
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern", size = .7)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day, size = .7)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
p + geom_line(aes(colour = day, size = 0.7)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
p + geom_line(aes(colour = day, size = 0.1)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
p + geom_line(aes(colour = day, size = 0.05)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day, size = 0.01)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day, size = 0.001)) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
p_day+geom_line(colour = "tomato", size = .7)+labs(x = "interval", y = "Number of steps", title = "Average Daily Activity Pattern")
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
p + geom_line(aes(colour = day), size = 1) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
head(pattern)
pattern
weekdays <- data.frame(time = data$interval_time[1:287], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:287], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
pattern$day <- as.factor(pattern$day)
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
pattern$day <- as.factor(pattern$day)
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+xlim(1,287)
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+xlim(1:287)
striptime(pattern$time, %h:%m)
striptime(pattern$time, "%h:%m")
strptime(pattern$time, format= "%h:%m")
class(pattern$time)
strptime(pattern$time)
data$interval_revised
head(data$interval_time)
head(data$interval_revise)
head(data$interval_revised)
format(pattern$time, "%H:%M")

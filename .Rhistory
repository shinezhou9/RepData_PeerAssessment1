sq <- (x[i] - m)^2
}
sq
}
mean(c(1,2,3,4,5))
squ(c(1, 2, 3, 4, 5))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in l) {
sq[i] <- (x[i] - m)^2
}
sq
}
squ(c(1, 2, 3, 4, 5))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sq
}
squ(c(1, 2, 3, 4, 5))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
sq_sum <- numeric()
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
sq_sum <- sq_sum + sq[i]
}
sq_sum
}
squ(c(1, 2, 3, 4, 5))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sq
}
squ_sum <- function(x = numeric()){
sq_sum <- numeric()
for(i in 1: length(squ)) {
sq_sum <- sq_sum + sq[i]
}
sq_sum
}
squ(c(1,2,3,4,5))
squ_sum(squ(c(1,2,3,4,5)))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sq
}
squ_sum <- function(x = numeric()){
sq_sum <- numeric()
for(i in 1: length(squ)) {
sq_sum <- sq_sum + squ[i]
}
sq_sum
}
squ_sum(squ(c(1,2,3,4,5)))
squ(24, 80, 95, 55, 30)
squ(c(24, 80, 95, 55, 30))
lengh(squ(c(24, 80, 95, 55, 30)))
length(squ(c(24, 80, 95, 55, 30)))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sq
}
squ_sum <- function(x = numeric()){
sq_sum <- numeric()
for(i in 1: length(squ)) {
sq_sum <- sq_sum + squ[i]
}
sq_sum
}
squ_sum(squ(c(1,2,3,4,5)))
sum(c(1,2,3,4,5))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sum(squ())
}
squ(c(1,2,3,4,5))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sum(squ)
}
squ(c(1,2,3,4,5))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sum(squ(x)
}
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sum(sq)
}
squ(c(1,2,3,4,5))
squ(c(24, 80, 95, 55, 30))
squ <- function(x = numeric()) {
l <- length(x)
sq <- numeric(l)
m <- mean(x)
for (i in 1:l) {
sq[i] <- (x[i] - m)^2
}
sum(sq)
}
s1 <- squ(c(24, 80, 95, 55, 30))
s2 <- 16^2 + 55^2 + 5^2 + 10^2
R <- 1 - (s2 / s1)
R
s1
s2
d <- c(1, 25, 46, 76, 140)
squ(d)
t0 <- (5, 15, 22, 32, 77)
t0 <- (5, 15, 22, 32, 77)
t0 <- c(5, 15, 22, 32, 77)
squ(t0)
t1 <- 0.6*d
ti
t1
t2 < 0.5*d
t2 <- 0.5*d
t2
squ(t1)
squ(t2)
sqrt(t0)
sum(squrt(t1)^2)
sum(sqrt(t1)^2)
47*47 + 25 + 225 + 64 +4
47*47 + 25*25 + 225 + 64 +4
x <- rnorm(100, 2, 4)
summary(x)
str(x)
f <- g(40, 10)
f <- gl(40, 10)
str(f)
summary(f)
library(darasets)
library(datasets)
str(airquaility)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
head(m)
m[, 1]
s <- split(airquality, airquality$Month)
str(s)
r <- rnorm(100, 1, 10)
r
dnorm(r)
pnorm(r)
r
?dnorm
dnorm(100, 1, 10)
dnorm(1, 2)
?dnorm
dnorm( mean = 0, sd = 1)
dnorm(100, 0, 1)
dnorm(0.5, 0, 1)
dnorm(1, 0, 1)
pnorm(0.5, 0, 1)
rnorm(10)
x <- rnorm(10, 20, 2)
x
?set.seed
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2x + e
summary(y)
plot(x, y)
set.seed(20)
x <- rbinorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
?rbinom
system.time(readLines("http://www,jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(1000)
system.time(svd(x))
?params
?optim
?optimize
make.NeglogLik <- function(data, fixed = c(FALSE, FALSE)) {
param <- fixed
function(p) {
patams[!fixed] <- p
mu <- params[1]
sima <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL <- make.NeglogLik(normals)
nLL
p
optim(c(mu = 0, sigma = 1), nLL)$par
make.NeglogLik <- function(data, fixed = c(FALSE, FALSE)) {
param <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sima <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
optim(c(mu = 0, sigma = 1), nLL)$par
make.NeglogLik <- function(data, fixed = c(FALSE, FALSE)) {
param <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sima <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
optim(c(mu = 0, sigma = 1), nLL)$par
make.NeglogLik <- function(data, fixed = c(FALSE, FALSE)) {
param <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sima <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
make.NeglogLik <- function(data, fixed = c(FALSE, FALSE)) {
param <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sima <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NeglogLik(normals)
nLL
optim(c(mu = 0, sigma = 1), nLL)$par
make.NeglogLik <- function(data, fixed = c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sima <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NeglogLik(normals)
nLL
optim(c(mu = 0, sigma = 1), nLL)$par
make.NeglogLik <- function(data, fixed = c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum(data - mu)^2 / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NeglogLik(normals)
nLL
optim(c(mu = 0, sigma = 1), nLL)$par
?function
?function
?function()
?optim
?optimize
?optim
v <- rnorm(100, 1, 2)
length(v)
optim(c(mu = 2, sigma = 3), nLL)$par
optim(c(mu = 10, sigma = 10), nLL)$par
?lm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
boxplot
?boxplot
?abline
?lwd
?barplot
?table
data.frame(x = rep(c("a", "b", "c"), each = 3, y = rnorm(10)))
data.frame(x = rep(c("a", "b", "c"), each = 3), y = rnorm(10))
data.frame(x = rep(c("a", "b", "c"), each = 3), y = rnorm(9))
frame <- data.frame(x = rep(c("a", "b", "c"), each = 3), y = rnorm(9))
h <- frame$y
h
class(h)
table(y)
table(h)
?boxplot
?par
?hist
?mflow
?par
?boxplot
?with
?plot
library(lattice)
?xyplot
?plot
?transform
library(datasets)
head(airquality)
airquality <- transform(airquality, Month = factor(Month))
head(airquality)
class(airquality$Month)
rm(airquality)
library(datasets)
head(airquality)
class(airquality$Month)
?boxplot
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb")
?line
?abline
>coef
?coef
?title
?plot
?legend
?lm
?oma
?par
mtext()
?mtext
example(points)
?points
dat <- read.table(pipe('grep "^[1-2]/2/2007" "household_power_consumption.txt"'), header=F, sep=';', na.strings = "?")
colnames(dat) <-names(read.table('household_power_consumption.txt', header=TRUE,sep=";",nrows=1))
dat$Date <- as.Date(dat$Date, format = "%d/%m/%Y")
dat$DateTime <- paste(dat$Date, dat$Time)
dat$DateTime <- as.POSIXlt(dat$DateTime)
topY <- max(dat$Sub_metering_1, dat$Sub_metering_2, dat$Sub_metering_3)
lowY <- min(dat$Sub_metering_1, dat$Sub_metering_2, dat$Sub_metering_3)
plot(dat$DateTime, dat$Sub_metering_1, type = "l", col = "black", ylim = c(lowY, topY),xlab = " ", ylab = "Energy sub metering")
lines(dat$DateTime, dat$Sub_metering_2, col = "red")
lines(dat$DateTime, dat$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),  lty = "solid", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file = "plot3.png", width=480, height=480, units = "px")
dev.off
?sum
?reformula
?reformulate
?glm
>predict
?predict
?table
install.packages("ProjectTemplate")
library(ProjectTemplate)
?ProjectTemplate
First Line Second Line
First Line Second Line
### Header 3
This is a blockquote
Theis is the second paragraph in the blockquote
##This is an H2 in a blockquote
### Header 3
>This is a blockquote
>Theis is the second paragraph in the blockquote
>##This is an H2 in a blockquote
* Cand
* Gum
* Booze
### Header 3
* Cand
* Gum
* Booze
### Header 3
## Heading 2
setwd("~/Desktop/Reproducible Research/RepData_PeerAssessment1")
head(average_steps)
data <- read.csv("activity.csv", header = TRUE, sep = ",")
data$date_revised <- as.Date(data$date)
data$interval <- sprintf("%04d", data$interval)
data$interval_time <- strptime(data$interval, format = "%H%M")
s_date <- split(data, data$date_revised)
total_steps <- sapply(s_date, function(x) sum(x$steps, na.rm = TRUE))
s_pattern <- split(data, data$interval)
average_steps <- sapply(s_pattern, function(x) mean(x$steps, na.rm = TRUE))
plot(data$interval_time[1:288], average_steps, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps")
max_index <- which(average_steps == max(average_steps))
max_interval <- data$interval[max_index]
max_interval
bad <- is.na(data$steps)
num_NA <- length(data$steps[bad])
num_NA
head(average_steps)
data$steps[bad]
head(bad, 1:10)
head(bad)
head(bad, 10)
head(bad, 100)
head(bad, skip(1000))
?head
head(average_steps)
data$average_steps <- average_steps
head(data)
data <- read.csv("activity.csv", header = TRUE, sep = ",")
data$date_revised <- as.Date(data$date)
data$interval_revised <- sprintf("%04d", data$interval)
data$interval_time <- strptime(data$interval_revised, format = "%H%M")
```{r totalsteps}
s_date <- split(data, data$date_revised)
total_steps <- sapply(s_date, function(x) sum(x$steps, na.rm = TRUE))
s_date <- split(data, data$date_revised)
total_steps <- sapply(s_date, function(x) sum(x$steps, na.rm = TRUE))
mean_steps <- mean(total_steps)
median_steps <- median(total_steps)
mean_steps
median_steps
s_pattern <- split(data, data$interval_revised)
average_steps <- sapply(s_pattern, function(x) mean(x$steps, na.rm = TRUE))
plot(data$interval_time[1:288], average_steps, type = "l", main = "average daily activity pattern", xlab = "5-minute interval", ylab = "average steps")
max_index <- which(average_steps == max(average_steps))
max_interval <- data$interval_revised[max_index]
max_interval
bad <- is.na(data$steps)
num_NA <- length(data$steps[bad])
num_NA
data$average_steps <- average_steps
head(data)
head(bad)
if (bad) {
data$steps <- average_steps
}
class(bad)
for (bad) {
data$steps <- average_steps
}
?for
